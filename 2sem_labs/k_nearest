import random
import heapq
import matplotlib.pyplot as plt
import  numpy as np

p = 0.8
xMin1 = 0
xMax1 = 50
yMin1 = 0
yMax1 = 50
xMin2 = 40
xMax2 = 75
yMin2 = 40
yMax2 = 75
k = 3
classesCount = 2
pointsCount1 = 50
pointsCount2 = 50
x = []
y = []

for i in range(pointsCount1):
    x.append([random.uniform(xMin1, xMax1), random.uniform(yMin1, yMax1)])
    y.append(1)
for j in range(pointsCount2):
    x.append([random.uniform(xMin2, xMax2), random.uniform(yMin2, yMax2)])
    y.append(0)

combined = list(zip(x, y))
random.shuffle(combined)
x, y = zip(*combined)

def train_test_split(x, y, p): #разбиение точек на x_train y_train x_test y_test

    v =round((pointsCount1 + pointsCount2) * p)
    x_train = x[:v]
    y_train = y[:v]
    x_test = x[v:]
    y_test = y[v:]

    return x_train, x_test, y_train, y_test

x_train, x_test, y_train, y_test = train_test_split(x, y, p)

print('x_train')
print(x_train)
print('y_train')
print(y_train)


def Pred(x_train, y_train, x_test):
    k = 3
    y_predict = []

    for i in range(len(x_test)):
        class_1 = 0
        class_0 = 0

        r = []
        for j in range(len(x_train)):
            dist = ((x_train[j][0] - x_test[i][0]) ** 2 + (x_train[j][1] - x_test[i][1]) ** 2) ** 0.5
            r.append(dist)

        nearest_indices = [r.index(val) for val in heapq.nsmallest(k, r)]

        for idx in nearest_indices:
            if y_train[idx] == 1:
                class_1 += 1
            else:
                class_0 += 1

        y_predict.append(1 if class_1 > class_0 else 0)

    return y_predict

y_predict1 = Pred(x_train, y_train, x_test)
print('Класс точек y_predict:')
print(y_predict1)
print('Класс изначальный точек y_test:')
print(y_test)
sovp = 0
for i in range(len(y_predict1)):
    if y_predict1[i] == y_test[i]:
        sovp += 1
accuracy = sovp / len(y_predict1)
print('Значение accuracy:')
print(accuracy)

x_train = np.array(x_train)
y_train = np.array(y_train)
x_test = np.array(x_test)
y_test = np.array(y_test)
y_predict1 = np.array(y_predict1)

plt.scatter(x_train[y_train == 1][:, 0], x_train[y_train == 1][:, 1],
            color='blue', marker='x', label='Train Class 0 ')
plt.scatter(x_train[y_train == 0][:, 0], x_train[y_train == 0][:, 1],
            color='blue', marker='o', label='Train Class x ')
plt.scatter(x_test[(y_test == 0) & (y_predict1 != 0)][:, 0],
                x_test[(y_test == 0) & (y_predict1 != 0)][:, 1],
                color='red', marker='o', label='Test Class 0 ')
plt.scatter(x_test[(y_test == 1) & (y_predict1 != 1)][:, 0],
                x_test[(y_test == 1) & (y_predict1 != 1)][:, 1],
                color='red', marker='x', label='Test Class x ')
plt.scatter(x_test[(y_test == 0) & (y_predict1 == 0)][:, 0],
                x_test[(y_test == 0) & (y_predict1 == 0)][:, 1],
                color='green', marker='o', label='Test Class 0 ')
plt.scatter(x_test[(y_test == 1) & (y_predict1 == 1)][:, 0],
                x_test[(y_test == 1) & (y_predict1 == 1)][:, 1],
                color='green', marker='x', label='Test Class x')

plt.title('K-nearest Results')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid()
plt.show()
